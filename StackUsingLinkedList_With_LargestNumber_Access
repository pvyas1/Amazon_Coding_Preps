import java.util.*;


public class Stack_With_Largest_Value_Return {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Nodenew stack = new Nodenew(0);
		int i = 0, value = 0, counter = 0;
		Scanner input = new Scanner(System.in);
		System.out.print("How many nodes you want to enter? ");
		counter = input.nextInt();
		if(counter > 0){
		for(i=0;i<counter;i++){
			System.out.print("\n Enter the new Node Value: ");
			value = input.nextInt();
			stack.addNode(value);
		}
		stack.Display();
		System.out.println("Max Element in the stack is: "+stack.getMax());
		System.out.println("The Top element in the stack is: "+stack.getTop());
		}
		else{
			System.out.println("Retry again with a valid number");
		}
		input.close();
	}

}

class Nodenew{
	Nodenew next = null;
	int Data;
	int max = -1;
	
	public Nodenew(int d){
		Data = d;
	}
	
	void  addNode(int d){
		Nodenew newN = new Nodenew(d);
		Nodenew head = this;
		
		/*while(head.next != null)
			head = head.next;*/
		if(head.next != null){
		if(head.next.max > newN.Data)
			newN.max = this.next.max;
		else
			newN.max = newN.Data;
		
		newN.next = head.next;
		head.next = newN;
		}
		else{
			newN.max = newN.Data;
			head.next = newN;
		}
			
		
		
	}
	
	void Display(){
		Nodenew head = this;
		if(head.next == null)
			System.out.println("Nothing to display");
		else{
			System.out.println("The elements in the stack are: ");
			while(head.next != null){
				head = head.next;
				System.out.println(head.Data);
			}
		}
	}
	
	int getTop(){
		return this.next.Data;
	}
	
	int getMax(){
		return this.next.max;
	}
}
